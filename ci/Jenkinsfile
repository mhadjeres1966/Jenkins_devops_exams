pipeline {
  agent any

  environment {
    BUILD_TAG = "v${BUILD_ID}"                // ex: v23
    KUBECONFIG_FILE = credentials('config')   // kubeconfig (Secret file)
  }

  stages {

    stage('Checkout Code') {
      steps {
        echo "üì¶ Checkout repository"
        git(
          branch: 'ci-cd-setup',
          url: 'https://github.com/mhadjeres1966/Jenkins_devops_exams.git',
          credentialsId: 'github_creds'
        )
      }
    }

<<<<<<< HEAD
    stage('Build & Push Docker Images') {
      steps {
        script {
          def services = ['movie-service', 'cast-service']
          withCredentials([usernamePassword(
            credentialsId: 'dockerhub_creds',
            usernameVariable: 'DOCKER_USER',
            passwordVariable: 'DOCKER_PASS'
          )]) {
            sh '''
              set -e
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            '''
            for (svc in services) {
              sh """
                set -e
                echo "==> Build & Push: ${svc}"
                docker build -t $DOCKER_USER/${svc}:$BUILD_TAG ./${svc}
                docker push $DOCKER_USER/${svc}:$BUILD_TAG
              """
=======
    stages {

        stage('Checkout Code') {
            steps {
                echo "üì¶ Clonage du d√©p√¥t GitHub (branche courante)"
                git(
                    branch: 'ci-cd-setup',
                    url: 'https://github.com/mhadjeres1966/Jenkins_devops_exams.git',
                    credentialsId: 'github_creds'
                )
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    echo "üê≥ Construction et push des images Docker"
                    def services = ['movie-service', 'cast-service']

                    // ‚úÖ Injection correcte du token DockerHub ici
                    withCredentials([usernamePassword(credentialsId: 'github_creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS')]) {

                        for (svc in services) {
                            sh """
                                echo "==> Building image for ${svc}"
                                docker build -t $DOCKER_USER/${svc}:$BUILD_TAG ./${svc}
                                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                docker push $DOCKER_USER/${svc}:$BUILD_TAG
                            """
                        }

                        sh "docker logout"
                    }
                }
            }
        }

        stage('Deploy to Dev & Staging') {
            steps {
                echo "üöÄ D√©ploiement automatique sur dev et staging"
                sh '''
                    mkdir -p ~/.kube
                    cat $KUBECONFIG_FILE > ~/.kube/config

                    # D√©ploiement sur dev
                    helm upgrade --install jenkins-exam-dev ./charts \
                        --namespace dev --create-namespace \
                        --set movieService.image.repository=$DOCKER_USER/movie-service \
                        --set movieService.image.tag=$BUILD_TAG \
                        --set castService.image.repository=$DOCKER_USER/cast-service \
                        --set castService.image.tag=$BUILD_TAG \
			            --set service.nodePort=30007

                    # D√©ploiement sur staging
                    helm upgrade --install jenkins-exam-staging ./charts \
                        --namespace staging --create-namespace \
                        --set movieService.image.repository=$DOCKER_USER/movie-service \
                        --set movieService.image.tag=$BUILD_TAG \
                        --set castService.image.repository=$DOCKER_USER/cast-service \
                        --set castService.image.tag=$BUILD_TAG \
			--set service.nodePort=30008 
                '''
            }
        }

        stage('Approval & Deploy to Production') {
            when {
                branch 'master' // ‚úÖ Seulement sur master
            }
            steps {
                script {
                    timeout(time: 20, unit: 'MINUTES') {
                        input message: "Souhaitez-vous d√©ployer en production ?", ok: "Oui, d√©ployer"
                    }

                    echo "üöÄ D√©ploiement manuel en production approuv√©"

                    sh '''
                        mkdir -p ~/.kube
                        cat $KUBECONFIG_FILE > ~/.kube/config

                        helm upgrade --install jenkins-exam-prod ./charts \
                            --namespace prod --create-namespace \
                            --set movieService.image.repository=$DOCKER_USER/movie-service \
                            --set movieService.image.tag=$BUILD_TAG \
                            --set castService.image.repository=$DOCKER_USER/cast-service \
                            --set castService.image.tag=$BUILD_TAG \
			    --set service.nodePort=30009 

                    '''
                }
>>>>>>> 87db93fb727d1718c3e2f865cc0f0a1c00a4dbbd
            }
            sh 'docker logout || true'
          }
        }
      }
    }

    stage('Deploy to Dev & Staging') {
      steps {
        echo "üöÄ Deploy to dev & staging via Helm"
        sh '''
          set -e
          mkdir -p ~/.kube
          cat "$KUBECONFIG_FILE" > ~/.kube/config

          # --- DEV (NodePort 30007) ---
          helm upgrade --install jenkins-exam-dev ./charts \
            --namespace dev --create-namespace \
            --set movieService.image.repository=$DOCKER_USER/movie-service \
            --set movieService.image.tag=$BUILD_TAG \
            --set castService.image.repository=$DOCKER_USER/cast-service \
            --set castService.image.tag=$BUILD_TAG \
            --set service.nodePort=30007

          # --- STAGING (NodePort 30008) ---
          helm upgrade --install jenkins-exam-staging ./charts \
            --namespace staging --create-namespace \
            --set movieService.image.repository=$DOCKER_USER/movie-service \
            --set movieService.image.tag=$BUILD_TAG \
            --set castService.image.repository=$DOCKER_USER/cast-service \
            --set castService.image.tag=$BUILD_TAG \
            --set service.nodePort=30008
        '''
      }
    }

    stage('Approval & Deploy to Production') {
      when { branch 'master' }   // prod seulement depuis master
      steps {
        script {
          timeout(time: 20, unit: 'MINUTES') {
            input message: 'D√©ployer en PRODUCTION ?', ok: 'Oui, d√©ployer'
          }
          echo 'üöÄ D√©ploiement en production'

          sh '''
            set -e
            mkdir -p ~/.kube
            cat "$KUBECONFIG_FILE" > ~/.kube/config

            # --- PROD (NodePort 30009) ---
            helm upgrade --install jenkins-exam-prod ./charts \
              --namespace prod --create-namespace \
              --set movieService.image.repository=$DOCKER_USER/movie-service \
              --set movieService.image.tag=$BUILD_TAG \
              --set castService.image.repository=$DOCKER_USER/cast-service \
              --set castService.image.tag=$BUILD_TAG \
              --set service.nodePort=30009
          '''
        }
      }
    }
  }

  post {
    success { echo '‚úÖ Pipeline termin√© avec succ√®s' }
    failure { echo '‚ùå √âchec du pipeline ‚Äî voir les logs' }
    always  { cleanWs() }
  }
}

