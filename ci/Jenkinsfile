pipeline {
    agent any

    environment {
        DOCKER_USER = "mourad1966"
        // ‚ö†Ô∏è Ne pas charger le token ici, il doit √™tre inject√© dans le stage avec withCredentials
        KUBECONFIG_FILE = credentials('config')
        BUILD_TAG = "v${BUILD_ID}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "üì¶ Clonage du d√©p√¥t GitHub (branche courante)"
                git(
                    branch: 'ci-cd-setup',
                    url: 'https://github.com/mhadjeres1966/Jenkins_devops_exams.git',
                    credentialsId: 'github_creds'
                )
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    echo "üê≥ Construction et push des images Docker"
                    def services = ['movie-service', 'cast-service']

                    // ‚úÖ Injection correcte du token DockerHub ici
                    withCredentials([usernamePassword(credentialsId: 'github_creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS')]) {

                        for (svc in services) {
                            sh """
                                echo "==> Building image for ${svc}"
                                docker build -t $DOCKER_USER/${svc}:$BUILD_TAG ./${svc}
                                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                docker push $DOCKER_USER/${svc}:$BUILD_TAG
                            """
                        }

                        sh "docker logout"
                    }
                }
            }
        }

        stage('Deploy to Dev & Staging') {
            steps {
                echo "üöÄ D√©ploiement automatique sur dev et staging"
                sh '''
                    mkdir -p ~/.kube
                    cat $KUBECONFIG_FILE > ~/.kube/config

                    # D√©ploiement sur dev
                    helm upgrade --install jenkins-exam-dev ./charts \
                        --namespace dev --create-namespace \
                        --set movieService.image.repository=$DOCKER_USER/movie-service \
                        --set movieService.image.tag=$BUILD_TAG \
                        --set castService.image.repository=$DOCKER_USER/cast-service \
                        --set castService.image.tag=$BUILD_TAG \
		        --set service.nodePort=3007

                    # D√©ploiement sur staging
                    helm upgrade --install jenkins-exam-staging ./charts \
                        --namespace staging --create-namespace \
                        --set movieService.image.repository=$DOCKER_USER/movie-service \
                        --set movieService.image.tag=$BUILD_TAG \
                        --set castService.image.repository=$DOCKER_USER/cast-service \
                        --set castService.image.tag=$BUILD_TAG \
			--set service.nodePort=30008
                '''
            }
        }

        stage('Approval & Deploy to Production') {
            when {
                branch 'master' // ‚úÖ Seulement sur master
            }
            steps {
                script {
                    timeout(time: 20, unit: 'MINUTES') {
                        input message: "Souhaitez-vous d√©ployer en production ?", ok: "Oui, d√©ployer"
                    }

                    echo "üöÄ D√©ploiement manuel en production approuv√©"

                    sh '''
                        mkdir -p ~/.kube
                        cat $KUBECONFIG_FILE > ~/.kube/config

                        helm upgrade --install jenkins-exam-prod ./charts \
                            --namespace prod --create-namespace \
                            --set movieService.image.repository=$DOCKER_USER/movie-service \
                            --set movieService.image.tag=$BUILD_TAG \
                            --set castService.image.repository=$DOCKER_USER/cast-service \
                            --set castService.image.tag=$BUILD_TAG
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline termin√© avec succ√®s !"
        }
        failure {
            echo "‚ùå √âchec du pipeline. Consultez les logs Jenkins."
        }
    }
}

